@page "/{PageIndex:int?}"

@inject IHttpRequestBuilderFactory Http

<PageTitle Value="The front page of AI | Fundus AI" />

<section class="home">
    <div class="title">
        <img src="/images/code.png" />
        <h1 class="align-middle">Build with AI</h1>
        <p class="font-weight-bold">Cutting-edge functionality<br />with machine and deep learning</p>
    </div>
</section>

<section class="search">
    <div class="main-content">
        <div class="container">
            <div class="row d-block">
                <EditForm Model="pageData" OnValidSubmit="OnValidFormSubmit">
                    <div class="input-group mb-3">
                        <InputText class="form-control" type="search" placeholder="Search" @bind-Value="pageData.SearchTerm" />
                        <div class="input-group-append">
                            <button class="btn btn-primary" type="submit">
                                <i class="fa fa-search"></i>
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>

            @foreach (ModelDetails model in pageData.Items)
            {
                <div class="row d-block mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">
                                <NavLink href=@string.Concat("/machine-learning-model/super-resolution/", model.Id)>@model.Title</NavLink>
                            </h5>
                            <h6 class="card-subtitle text-muted">@model.Subtitle</h6>
                            <p class="card-text">@model.Description</p>
                            <p class="card-text text-right">
                                <small class="text-muted text-right">@model.Date.ToShortDateString()</small>
                            </p>
                        </div>
                    </div>
                </div>
            }
        </div>

        <nav>
            <ul class="pagination justify-content-center">
                @{
                    string disabled;
                    disabled = pageData.HasPreviousPage ? string.Empty : "disabled";
                    <li class="page-item @disabled">
                        <NavLink class="page-link" href=@string.Concat("/", pageData.PageIndex - 1)>&laquo;</NavLink>
                    </li>
                    <li class="page-item active">
                        <NavLink class="page-link" href=@string.Concat("/", pageData.PageIndex)>@(pageData.PageIndex)</NavLink>
                    </li>
                    disabled = pageData.HasNextPage ? string.Empty : "disabled";
                    <li class="page-item @disabled">
                        <NavLink class="page-link" href=@string.Concat("/", pageData.PageIndex + 1)>&raquo;</NavLink>
                    </li>
                }
            </ul>
        </nav>
    </div>
</section>

@code{
    [Parameter]
    public int? PageIndex { get; set; }

    private PageData pageData;

    protected override void OnInitialized()
    {
        pageData = new();
    }

    protected override async Task OnParametersSetAsync()
    {
        pageData.PageIndex = PageIndex ?? pageData.PageIndex;

        await Http.Create($"/api/machine-learning-model/page/{pageData.PageSize}/{pageData.PageIndex}")
            .OnOk<Page<ModelDetails>>((page) =>
            {
                pageData.PageSize = page.PageSize;
                pageData.PageIndex = page.PageIndex;
                pageData.TotalPages = page.TotalPages;
                pageData.Items = page.Items;
                pageData.HasPreviousPage = page.HasPreviousPage;
                pageData.HasNextPage = page.HasNextPage;
            })
            .OnBadRequest(() =>
            {
                pageData.PageIndex = 1;
            })
            .Get();
    }

    private async Task OnValidFormSubmit()
    {
        await Http.Create($"/api/machine-learning-model/page/{pageData.PageSize}/1/{pageData.SearchTerm}")
            .OnOk<Page<ModelDetails>>((page) =>
            {
                pageData.PageSize = page.PageSize;
                pageData.PageIndex = page.PageIndex;
                pageData.TotalPages = page.TotalPages;
                pageData.Items = page.Items;
                pageData.HasPreviousPage = page.HasPreviousPage;
                pageData.HasNextPage = page.HasNextPage;
            })
            .OnBadRequest(() =>
            {
                pageData.PageIndex = 1;
            })
            .Get();
    }
}