@page "/machine-learning-model/super-resolution/{Model:int}"

@inject IHttpRequestBuilderFactory Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle Value="Super Resolution | Fundus AI" />

<section class="model">
    <div class="result">
        <div class="result-area">
            @if (resolutionData.OutputFile != null)
            {
                <img src=@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(resolutionData.OutputFile)) />
            }
            else
            {
                <i class="fa fa-file-image-o"></i>
            }
            @if (resolutionData.InputFile != null && isLoading)
            {
                <svg class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                    <circle class="path-background" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle>
                    <circle class="path-foreground" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle>
                </svg>
            }
        </div>
    </div>

    <div class="try-it">
        <h1>@resolutionData.Title</h1>
        <h2>@resolutionData.Subtitle</h2>
        <p class="description">@resolutionData.Description</p>

        <EditForm enctype="multipart/form-data" Model="resolutionData" OnValidSubmit="OnValidFormSubmit">
            <ServerSideValidator @ref="serverSideValidator" />
            <DataAnnotationsValidator />

            <div class="form-group">
                <div class="form-check form-check-inline">
                    <label class="form-check-label">Upscale factor</label>
                </div>
                <InputRadioGroup @bind-Value="resolutionData.UpscaleFactor">
                    @foreach (byte upscaleFactor in resolutionData.UpscaleFactors)
                    {
                        string id = $"{upscaleFactor}x";
                        <div class="form-check form-check-inline">
                            <InputRadio id="@id" class="form-check-input" Value="upscaleFactor" disabled="@isLoading" />
                            <label class="form-check-label" for="@id">@id</label>
                        </div>
                    }
                </InputRadioGroup>
            </div>
            <div class="form-group">
                <InputFile id="file" class="input-file form-control-file" accept="image/*" disabled="@isLoading" OnChange="OnInputFileChange" />
                @{
                    string disabled = isLoading ? "disabled" : string.Empty;
                    <label class="btn btn-file btn-block @disabled" for="file">
                        <i class="icon-file fa"></i>
                        <span class="js-filename">Choose an image</span>
                    </label>
                }
                <ValidationMessage For="@(() => resolutionData.InputFile)" />
            </div>
            <button class="btn btn-primary btn-block" type="submit" disabled="@isLoading">Upload</button>
            <ValidationMessage For="@(() => resolutionData.OutputFile)" />
        </EditForm>
    </div>
</section>

<section class="statistics">
    <div class="inner-content">
        <p class="text-center">STATISTICS</p>
        <div class="container">
            <div class="row">
                <div class="col">
                    <span>MSE</span>
                </div>
                <div class="col">
                    <span>1</span>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <span>PSNR</span>
                </div>
                <div class="col">
                    <span>2</span>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <span>SSIM</span>
                </div>
                <div class="col">
                    <span>3</span>
                </div>
            </div>
        </div>
    </div>
</section>

<section class="slash">
</section>

@code {
    [Parameter]
    public int Model { get; set; }

    private bool isLoading;
    private ResolutionData resolutionData;
    private ServerSideValidator serverSideValidator;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        resolutionData = new();

        await Http.Create($"/api/machine-learning-model/{Model}/super-resolution/details")
            .OnOk<ResolutionDetails>((model) =>
            {
                isLoading = false;

                resolutionData.Title = model.Title;
                resolutionData.Subtitle = model.Subtitle;
                resolutionData.Description = model.Description;
                resolutionData.UpscaleFactors = model.UpscaleFactors;
                resolutionData.UpscaleFactor = model.UpscaleFactors[0];
            })
            .OnNotFound(() =>
            {
                NavigationManager.NavigateTo("/");
            })
            .Get();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        serverSideValidator.ClearErrors();

        if (e.File.Size > 5242880)
        {
            serverSideValidator.DisplayError(nameof(resolutionData.InputFile), "Images larger than 5MB are not supported.");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("UpdateInputFile", e.File.Name);

            using MemoryStream stream = new();
            await e.File.OpenReadStream(5242880).CopyToAsync(stream);
            resolutionData.InputFile = stream.ToArray();
        }
    }

    private async Task OnValidFormSubmit()
    {
        isLoading = true;
        await JSRuntime.InvokeVoidAsync("ResetInputFile", "Choose an image");

        await Http.Create($"/api/machine-learning-model/{Model}/super-resolution/upscale/{resolutionData.UpscaleFactor}")
            .OnCreated<byte[]>((image) =>
            {
                isLoading = false;

                resolutionData.InputFile = null;
                resolutionData.OutputFile = image;
            })
            .OnInternalServerError(() =>
            {
                isLoading = false;

                serverSideValidator.DisplayError(nameof(resolutionData.OutputFile), "An error occurred on the server while processing the image.");
            })
            .Post(resolutionData.InputFile);
    }
}