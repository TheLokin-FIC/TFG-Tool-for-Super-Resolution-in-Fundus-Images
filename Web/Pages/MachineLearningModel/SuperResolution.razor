@page "/machine-learning-model/super-resolution/{Model:int}"

@inject IHttpRequestBuilderFactory Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle Value="Super Resolution | Fundus AI" />

<div class="try-it">
    <div class="result-area">
        @if (modelData.OutputFile != null)
        {
            <img src=@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(modelData.OutputFile)) />
        }
        else
        {
            <i class="fa fa-file-image-o"></i>
        }
        @if (modelData.InputFile != null && isLoading)
        {
            <svg class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                <circle class="path-background" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle>
                <circle class="path-foreground" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle>
            </svg>
        }
    </div>
</div>

<div class="info">
    <h1>@modelData.Name</h1>
    <h2>@modelData.Info</h2>
    <p class="description">With super resolution powered by deep learning, you can increase the resolution of your images without losing rich features.</p>

    <EditForm enctype="multipart/form-data" Model="modelData" OnValidSubmit="OnValidFormSubmit">
        <ServerSideValidator @ref="serverSideValidator" />
        <DataAnnotationsValidator />

        <div class="form-group">
            <div class="form-check form-check-inline">
                <label class="form-check-label">Upscale factor</label>
            </div>
            <InputRadioGroup @bind-Value="modelData.UpscaleFactor">
                @foreach (byte upscaleFactor in modelData.UpscaleFactors)
                {
                    string id = $"{upscaleFactor}x";
                    <div class="form-check form-check-inline">
                        <InputRadio id="@id" class="form-check-input" Value="upscaleFactor" disabled="@isLoading" />
                        <label class="form-check-label" for="@id">@id</label>
                    </div>
                }
            </InputRadioGroup>
        </div>
        <div class="form-group">
            <InputFile id="file" class="input-file form-control-file" accept="image/*" disabled="@isLoading" OnChange="OnInputFileChange" />
            @{
                string disabled = isLoading ? "disabled" : string.Empty;
                <label class="btn btn-file btn-block @disabled" for="file">
                    <i class="icon-file fa"></i>
                    <span class="js-filename">Choose an image</span>
                </label>
            }
            <ValidationMessage For="@(() => modelData.InputFile)" />
        </div>
        <button class="btn btn-primary btn-block" type="submit" disabled="@isLoading">Upload</button>
        <ValidationMessage For="@(() => modelData.OutputFile)" />
    </EditForm>
</div>

@code {
    [Parameter]
    public int Model { get; set; }

    private bool isLoading;
    private ModelData modelData;
    private ServerSideValidator serverSideValidator;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        modelData = new();

        await Http.Create($"/api/machine-learning-model/super-resolution/details/{Model}")
        .OnOk<ModelDetails>((model) =>
        {
            isLoading = false;

            modelData.Name = model.Name;
            modelData.Info = model.Info;
            modelData.UpscaleFactors = model.UpscaleFactors;
            modelData.UpscaleFactor = model.UpscaleFactors[0];
        })
        .OnNotFound(() =>
        {
            NavigationManager.NavigateTo("/");
        })
        .Get();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        serverSideValidator.ClearErrors();

        if (e.File.Size > 5242880)
        {
            serverSideValidator.DisplayError(nameof(modelData.InputFile), "Images larger than 5MB are not supported.");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("UpdateInputFile", e.File.Name);

            using MemoryStream stream = new();
            await e.File.OpenReadStream(5242880).CopyToAsync(stream);
            modelData.InputFile = stream.ToArray();
        }
    }

    private async Task OnValidFormSubmit()
    {
        isLoading = true;
        await JSRuntime.InvokeVoidAsync("ResetInputFile", "Choose an image");

        await Http.Create("/api/machine-learning-model/super-resolution/upscale-image")
        .OnCreated<byte[]>((image) =>
        {
            isLoading = false;

            modelData.InputFile = null;
            modelData.OutputFile = image;
        })
        .OnInternalServerError(() =>
        {
            isLoading = false;

            serverSideValidator.DisplayError(nameof(modelData.OutputFile), "An error occurred on the server while processing the image.");
        })
        .Post(new ResolutionData()
        {
            ModelId = Model,
            UpscaleFactor = modelData.UpscaleFactor,
            Image = modelData.InputFile
        });
    }
}