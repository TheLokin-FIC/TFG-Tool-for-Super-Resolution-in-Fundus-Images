@using DataTransfer.Output.MachineLearning.SuperResolution
@using Web.Components.Data.SuperResolution

@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject IHttpRequestBuilderFactory Http
@inject IJSRuntime JSRuntime

<section class="model">
    <div class="result">
        <div class="download">
            <Button Disabled="@(outputImage == null)" Clicked="@(() => BlazorDownloadFileService.DownloadFile("super-resolution.jpeg", outputImage, "application/octet-stream"))">
                <i class="fa fa-download"></i>
            </Button>
        </div>
        <div class="result-area">
            @if (outputImage != null)
            {
                <img src=@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(outputImage)) />
            }
            else
            {
                <i class="fa fa-file-image-o"></i>
            }
            <Spinner Visible="@isLoading" />
        </div>
    </div>

    <div class="try-it">
        <h1>@ModelDetails.Category</h1>
        <h2>@ModelDetails.Title</h2>
        <p class="description">@ModelDetails.Description</p>

        <EditForm enctype="multipart/form-data" Model="UpscaleData" OnValidSubmit="OnValidFormSubmit">
            <ServerSideValidator @ref="serverValidator" />
            <DataAnnotationsValidator />

            <div class="form-group">
                <div class="form-check form-check-inline">
                    <label class="form-check-label">Upscale factor</label>
                </div>
                <InputRadioGroup @bind-Value="@UpscaleData.UpscaleFactor">
                    @foreach (UpscaleFactorItem item in UpscaleData.UpscaleFactors)
                    {
                        <div class="form-check form-check-inline">
                            <InputRadio id="@item.Value.ToString()" class="form-check-input" Value="@item.Value" />
                            <label class="form-check-label" for="@item.Value.ToString()">@item.Label</label>
                        </div>
                    }
                </InputRadioGroup>
            </div>
            <div class="form-group">
                <InputFile id="singleFile" class="input-file form-control-file" accept="image/png, image/jpeg" OnChange="@OnInputFileChange" disabled="@isLoading" />
                @{
                    string disabled = isLoading ? "disabled" : "";
                    <label class="btn btn-file btn-block @disabled" for="singleFile">
                        <i class="icon-file fa"></i>
                        <span class="js-filename">Choose an image</span>
                    </label>
                }
                <ValidationMessage For="@(() => UpscaleData.Image)" />
            </div>
            <button class="btn btn-primary btn-block" type="submit" disabled="@isLoading">Upload</button>
        </EditForm>
    </div>
</section>

@code {
    [Parameter]
    public ResolutionModelDetails ModelDetails { get; set; }
    [Parameter]
    public UpscaleData UpscaleData { get; set; }
    private ServerSideValidator serverValidator;
    private bool isLoading = false;
    private byte[] outputImage = null;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        serverValidator.ClearErrors();
        if (e.File.Size > 5242880)
        {
            serverValidator.DisplayError(nameof(UpscaleData.Image), "Images larger than 5MB are not supported.");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("UpdateInputFile", e.File.Name);

            using MemoryStream stream = new();
            await e.File.OpenReadStream(5242880).CopyToAsync(stream);
            UpscaleData.Image = stream.ToArray();
        }
    }

    private async Task OnValidFormSubmit()
    {
        isLoading = true;
        await JSRuntime.InvokeVoidAsync("ResetInputFile", "Choose an image");

        await Http.Create($"/api/machine-learning-model/super-resolution/upscale/{ModelDetails.Id}/{UpscaleData.UpscaleFactor}")
            .OnCreated<byte[]>((image) =>
            {
                outputImage = image;
            })
            .OnInternalServerError(() =>
            {
                serverValidator.DisplayError(nameof(UpscaleData.Image), "An error occurred on the server while processing the image.");
            })
            .Post(UpscaleData.Image);

        isLoading = false;
    }
}