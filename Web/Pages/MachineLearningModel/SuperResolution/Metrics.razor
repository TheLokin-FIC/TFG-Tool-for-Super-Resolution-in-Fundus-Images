@using DataTransfer.Output.MachineLearning.SuperResolution
@using Web.Components.Data.SuperResolution
@inject IHttpRequestBuilderFactory Http

<section class="metrics">
    <div class="files">
        <InputFile id="multipleFile" class="input-file form-control-file" accept="image/png, image/jpeg" OnChange="@OnInputFileChange" disabled="@isLoading" multiple />
        @{
            string disabled = isLoading ? "disabled" : "";
            <label class="btn btn-file btn-block @disabled" for="multipleFile">
                <i class="icon-file fa"></i>
                <span>Choose an image</span>
            </label>
        }
        <ul class="list-group list-group-flush">
            @foreach (byte[] file in MetricData.Images)
            {
                <li class="list-group-item">
                    <div class="file">
                        <div class="container">
                            <div class="row">
                                <div class="col-2">
                                    <img src=@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(file))>
                                </div>
                                <div class="col-8">
                                    <span>FILENAME.jpg</span>
                                </div>
                                <div class="col-2">
                                    <Button Clicked="@(() => MetricData.Images.Remove(file))" Disabled="@isLoading">
                                        <i class="fa fa-times-circle"></i>
                                    </Button>
                                </div>
                            </div>
                        </div>
                    </div>
                </li>
            }
        </ul>
        <Spinner Visible="@isLoading" />
    </div>
    <div class="try-it">
        <h1>@ModelDetails.Category</h1>
        <h2>@ModelDetails.Title</h2>
        <p class="description">@ModelDetails.Description</p>

        <EditForm enctype="multipart/form-data" Model="MetricData" OnValidSubmit="OnValidFormSubmit">
            <ServerSideValidator @ref="serverValidator" />
            <DataAnnotationsValidator />

            <div class="form-group">
                <Table Borderless="true" Narrow="true">
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>Upscale factor</TableHeaderCell>
                            <InputRadioGroup @bind-Value="@MetricData.UpscaleFactor">
                                @foreach (UpscaleFactorItem item in MetricData.UpscaleFactors)
                                {
                                    <TableHeaderCell>
                                        <div class="form-check form-check-inline">
                                            <InputRadio id="@item.Value.ToString()" class="form-check-input" Value="@item.Value" />
                                            <label class="form-check-label" for="@item.Value.ToString()">@item.Label</label>
                                        </div>
                                    </TableHeaderCell>
                                }
                            </InputRadioGroup>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach (RelatedResolutionModelItem switchItem in MetricData.RelatedResolutionModels)
                        {
                            <TableRow>
                                <TableHeaderCell>
                                    @{
                                        bool disabled = !switchItem.UpscaleFactors.Contains(MetricData.UpscaleFactor);
                                        if (disabled)
                                        {
                                            switchItem.Checked = false;
                                        }
                                        <Switch TValue="bool" @bind-Checked="@(switchItem.Checked)" Disabled="@disabled">@switchItem.Label</Switch>
                                    }
                                </TableHeaderCell>
                                @foreach (UpscaleFactorItem radioItem in MetricData.UpscaleFactors)
                                {
                                    <TableHeaderCell>
                                        @if (switchItem.UpscaleFactors.Contains(radioItem.Value))
                                        {
                                            <i class="fa fa-check"></i>
                                        }
                                    </TableHeaderCell>
                                }
                            </TableRow>
                        }
                    </TableBody>
                </Table>
                <ValidationMessage For="@(() => MetricData.Images)" />
            </div>
            <button class="btn btn-primary btn-block" type="submit" disabled="@isLoading">Generate</button>
        </EditForm>
    </div>
</section>

<Modal @ref="modal">
    <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>Metrics</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <section class="data">
                <SelectList TItem="string" TValue="string" Data="@MetricData.Metrics" TextField="@((item) => item)" ValueField="@((item) => item)" SelectedValue="@MetricData.SelectedMetric" SelectedValueChanged="@OnSelectMetricChanged" />
                <BarChart TItem="double" @ref="chart" />
            </section>

            @if (modelMetrics.Count == MetricData.RelatedResolutionModels.Count(x => x.Checked) + 4)
            {
                List<int> models = new() { -3, -2, -1 };
                models.AddRange(MetricData.RelatedResolutionModels.Where(x => x.Checked).Select(x => x.Id));
                foreach (int model in models)
                {
                    <section class="data mt-4">
                        <Carousel @bind-SelectedSlide="@slides[model]" Autoplay="false" ShowIndicators="false">
                            @for (int i = 0; i < modelMetrics[model].ImageMetrics.Count; i++)
                            {
                                <CarouselSlide Name="@i.ToString()">
                                    <div class="container">
                                        <div class="row">
                                            <div class="col">
                                                <div class="row">
                                                    <div class="col">
                                                        <p class="text-center font-weight-bold">
                                                            Original
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col text-center">
                                                        <img src=@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(MetricData.Images[int.Parse(slides[model])])) />
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col">
                                                <div class="row">
                                                    <div class="col">
                                                        <p class="text-center font-weight-bold">
                                                            @ModelDetails.Title
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col text-center">
                                                        <img src=@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(modelMetrics[ModelDetails.Id].ImageMetrics[int.Parse(slides[model])].Image)) />
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col">
                                                <div class="row">
                                                    <div class="col">
                                                        <p class="text-center font-weight-bold">
                                                            @modelMetrics[model].Title
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col text-center">
                                                        <img src=@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(modelMetrics[model].ImageMetrics[int.Parse(slides[model])].Image)) />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </CarouselSlide>
                            }
                        </Carousel>

                        <Table Class="mt-4">
                            <TableHeader>
                                <TableRow>
                                    <TableHeaderCell></TableHeaderCell>
                                    <TableHeaderCell>
                                        @ModelDetails.Title
                                    </TableHeaderCell>
                                    <TableHeaderCell>
                                        @modelMetrics[model].Title
                                    </TableHeaderCell>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                <TableRow>
                                    <TableRowHeader>
                                        MSE
                                    </TableRowHeader>
                                    <TableRowCell>
                                        @modelMetrics[ModelDetails.Id].ImageMetrics[int.Parse(slides[model])].MSE
                                    </TableRowCell>
                                    <TableRowCell>
                                        @modelMetrics[model].ImageMetrics[int.Parse(slides[model])].MSE
                                    </TableRowCell>
                                </TableRow>
                                <TableRow>
                                    <TableRowHeader>
                                        PSNR
                                    </TableRowHeader>
                                    <TableRowCell>
                                        @modelMetrics[ModelDetails.Id].ImageMetrics[int.Parse(slides[model])].PSNR
                                    </TableRowCell>
                                    <TableRowCell>
                                        @modelMetrics[model].ImageMetrics[int.Parse(slides[model])].PSNR
                                    </TableRowCell>
                                </TableRow>
                                <TableRow>
                                    <TableRowHeader>
                                        SSIM
                                    </TableRowHeader>
                                    <TableRowCell>
                                        @modelMetrics[ModelDetails.Id].ImageMetrics[int.Parse(slides[model])].SSIM
                                    </TableRowCell>
                                    <TableRowCell>
                                        @modelMetrics[model].ImageMetrics[int.Parse(slides[model])].SSIM
                                    </TableRowCell>
                                </TableRow>
                            </TableBody>
                        </Table>
                    </section>
                }
            }
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public ResolutionModelDetails ModelDetails { get; set; }
    [Parameter]
    public MetricData MetricData { get; set; }
    private IDictionary<int, string> slides = new Dictionary<int, string>();
    private IDictionary<int, DatasetMetrics> modelMetrics = new Dictionary<int, DatasetMetrics>();
    private ServerSideValidator serverValidator;
    private BarChart<double> chart = new BarChart<double>();
    private List<int> Models = new();
    private List<string> backgroundColors = new List<string> {
        ChartColor.FromRgba(255,  99, 132, 0.5f),
        ChartColor.FromRgba( 54, 162, 235, 0.5f),
        ChartColor.FromRgba(255, 206,  86, 0.5f),
        ChartColor.FromRgba( 75, 192, 192, 0.5f),
        ChartColor.FromRgba(153, 102, 255, 0.5f),
        ChartColor.FromRgba(255, 159,  64, 0.5f)
    };
    private List<string> borderColors = new List<string> {
        ChartColor.FromRgba(255,  99, 132, 1f),
        ChartColor.FromRgba( 54, 162, 235, 1f),
        ChartColor.FromRgba(255, 206,  86, 1f),
        ChartColor.FromRgba( 75, 192, 192, 1f),
        ChartColor.FromRgba(153, 102, 255, 1f),
        ChartColor.FromRgba(255, 159,  64, 1f)
    };
    private Modal modal;
    private bool isLoading = false;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        serverValidator.ClearErrors();
        if (MetricData.Images.Count + e.FileCount > 10)
        {
            serverValidator.DisplayError(nameof(MetricData.Images), "10 is the maximum number of images.");
        }
        else
        {
            foreach (IBrowserFile file in e.GetMultipleFiles(20))
            {
                if (file.Size > 5242880)
                {
                    serverValidator.DisplayError(nameof(MetricData.Images), "Images larger than 5MB are not supported.");
                }
                else
                {
                    using MemoryStream stream = new();
                    await file.OpenReadStream(5242880).CopyToAsync(stream);
                    MetricData.Images.Add(stream.ToArray());
                }
            }
        }
    }

    private async Task OnValidFormSubmit()
    {
        isLoading = true;
        slides.Clear();
        modelMetrics.Clear();

        Models.Clear();
        Models.AddRange(new int[] { ModelDetails.Id, -3, -2, -1 });
        Models.AddRange(MetricData.RelatedResolutionModels.Where(x => x.Checked).Select(x => x.Id));
        foreach (int model in Models)
        {
            slides.Add(model, "0");
            await Http.Create($"/api/machine-learning-model/super-resolution/metrics/{model}/{MetricData.UpscaleFactor}")
                .OnCreated<DatasetMetrics>((datasetMetrics) =>
                {
                    modelMetrics.Add(datasetMetrics.Id, datasetMetrics);
                })
                .OnInternalServerError(() =>
                {
                    isLoading = false;
                    serverValidator.DisplayError(nameof(MetricData.Images), "An error occurred on the server while processing the images.");
                })
                .Post(MetricData.Images);
        }

        isLoading = false;
        modal.Show();
        await OnSelectMetricChanged(MetricData.Metrics[0]);
    }

    private async Task OnSelectMetricChanged(string metric)
    {
        MetricData.SelectedMetric = metric;

        await chart.Clear();
        List<string> labels = new();
        foreach (int model in Models)
        {
            labels.Add(modelMetrics[model].Title);
        }
        await chart.AddLabelsDatasetsAndUpdate(labels, GetChartDataset(metric));
    }

    private BarChartDataset<double> GetChartDataset(string metric)
    {
        List<double> data = new();
        foreach (int model in Models)
        {
            switch (metric)
            {
                case "MSE":
                    data.Add(modelMetrics[model].MSE);
                    break;
                case "PSNR":
                    data.Add(modelMetrics[model].PSNR);
                    break;
                case "SSIM":
                    data.Add(modelMetrics[model].SSIM);
                    break;
            }
        }

        return new BarChartDataset<double>
        {
            Label = metric,
            Data = data,
            BackgroundColor = backgroundColors.Take(Models.Count()).ToList(),
            BorderColor = borderColors.Take(Models.Count()).ToList()
        };
    }
}