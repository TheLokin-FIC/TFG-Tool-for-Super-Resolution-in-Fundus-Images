@page "/machine-learning-model/super-resolution/{ModelId:int}"

@using DataTransfer.Output.Collections
@using DataTransfer.Output.Dataset
@using DataTransfer.Output.MachineLearning.SuperResolution
@using Web.Components.Data.Search
@using Web.Components.Data.SuperResolution

@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject IHttpRequestBuilderFactory Http
@inject IServiceProvider ServiceProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged" Justified="true">
    <Items>
        <Tab Name="model">Model</Tab>
        <Tab Name="metrics">Metrics</Tab>
    </Items>
    <Content>
        <TabPanel Name="model">
            <div class="main-content">
                <div class="result">
                    <div class="download">
                        <Button Class="btn-download" Disabled="@(outputImage == null)" Clicked="@(() => BlazorDownloadFileService.DownloadFile($"{upscaleData.Image.Name.Split(".")[0]}_{upscaleData.UpscaleFactor}x.jpeg", outputImage, "application/octet-stream"))">
                            <i class="fa fa-download"></i>
                        </Button>
                    </div>
                    <div class="result-area">
                        @if (outputImage != null)
                        {
                            <img src=@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(outputImage)) />
                        }
                        else
                        {
                            <i class="fa fa-file-image-o"></i>
                        }
                        @if (isModelLoading)
                        {
                            <svg class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                                <circle class="path-background" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle>
                                <circle class="path-foreground" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle>
                            </svg>
                        }
                    </div>
                </div>

                <div class="try-it">
                    <h1>@modelDetails.Category</h1>
                    <h2>@modelDetails.Title</h2>
                    <p class="description">@modelDetails.Description</p>

                    <EditForm enctype="multipart/form-data" Model="upscaleData" OnValidSubmit="OnValidModelFormSubmit">
                        <ServerSideValidator @ref="serverValidator" />
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <div class="form-check form-check-inline">
                                <label class="form-check-label">Upscale factor</label>
                            </div>
                            <InputRadioGroup @bind-Value="@upscaleData.UpscaleFactor">
                                @foreach (UpscaleFactorItem item in upscaleData.UpscaleFactors)
                                {
                                    <div class="form-check form-check-inline">
                                        <InputRadio id="@string.Concat(item.Value, "u")" class="form-check-input" Value="@item.Value" />
                                        <label class="form-check-label" for="@item.Value.ToString()">@item.Label</label>
                                    </div>
                                }
                            </InputRadioGroup>
                        </div>
                        <div class="form-group">
                            <FileEdit ElementId="singleFile" Filter="image/*" Changed="@OnModelFileChanged" Progressed="@OnModelFileProgressed" Written="@OnModelFileWritten" Disabled="@isModelLoading" />
                            @{
                                string disabled = isModelLoading ? "disabled" : "";
                                <label id="labelu" class="btn btn-file btn-block @disabled" for="singleFile">
                                    <i class="icon-file fa"></i>
                                    <span class="js-filename">Choose an image</span>
                                </label>
                            }
                            <ValidationMessage For="@(() => upscaleData.Image)" />
                        </div>
                        <button class="btn btn-primary btn-block" type="submit" disabled="@isModelLoading">UPLOAD</button>
                    </EditForm>
                </div>
            </div>
        </TabPanel>
        <TabPanel Name="metrics">
            <div class="main-content">
                <div class="result">
                    <div class="container">
                        <div class="row" style="padding:10px 0px 0px 0px;">
                            <div class="col align-self-center text-right">
                                <Button Class="btn-block" Color="Color.Dark" Clicked="async () => { await ChangePage(1); modalDataset.Show(); }">
                                    Datasets
                                </Button>
                            </div>
                        </div>
                        <div class="row" style="padding:10px 0px 10px 0px;">
                            <div class="col align-self-center text-right">
                                <FileEdit ElementId="file" Filter="image/*" Multiple="true" Changed="@OnMetricFileChanged" Progressed="@OnMetricFileProgressed" Written="@OnMetricFileWritten" />
                                @{
                                    <label class="btn btn-file btn-block" for="file">
                                        <i class="icon-file fa"></i>
                                        <span>Browse images</span>
                                    </label>
                                }
                            </div>
                        </div>
                    </div>
                    <div style="height:387px; overflow-y:scroll;">
                        <Table Narrow="true" Borderless="true" Hoverable="true">
                            <TableBody>
                                @foreach (FileData file in metricData.Images)
                                {
                                    <TableRow>
                                        <TableRowCell Style="padding:0px;">
                                            <div class="container">
                                                <div class="row">
                                                    <div class="col-lg col-sm-4 col-4 text-truncate align-self-center">
                                                        <i class="fa fa-image fa-fw"></i>
                                                        <span>
                                                            @file.Name
                                                            (@Beautify.BytesToText(file.Size))
                                                        </span>
                                                    </div>
                                                    <div class="col-lg-4 col-sm-3 col-3 align-self-center">
                                                        <Progress Class="align-middle" Size="Size.Small">
                                                            <ProgressBar Value="@file.Percentage" />
                                                        </Progress>
                                                    </div>
                                                    <div class="col-2 align-self-center text-right">
                                                        <Button Size="Size.Small" Clicked="(() => { metricData.Images.Remove(file); fileNames.Remove(file.Name); }) ">
                                                            <i class="fa fa-times fa-2x"></i>
                                                        </Button>
                                                    </div>
                                                </div>
                                            </div>
                                        </TableRowCell>
                                    </TableRow>
                                }
                            </TableBody>
                        </Table>
                        @if (isMetricLoading)
                        {
                            <svg class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                                <circle class="path-background" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle>
                                <circle class="path-foreground" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle>
                            </svg>
                        }
                    </div>
                </div>
                <div class="try-it">
                    <h1>@modelDetails.Category</h1>
                    <h2>@modelDetails.Title</h2>
                    <p class="description">@modelDetails.Description</p>

                    <EditForm enctype="multipart/form-data" Model="metricData" OnValidSubmit="OnValidMetricFormSubmit">
                        <ServerSideValidator @ref="serverValidator" />
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <Table Borderless="true" Narrow="true">
                                <TableHeader>
                                    <TableRow>
                                        <TableHeaderCell>Upscale factor</TableHeaderCell>
                                        <InputRadioGroup @bind-Value="@metricData.UpscaleFactor">
                                            @foreach (UpscaleFactorItem item in metricData.UpscaleFactors)
                                            {
                                                <TableHeaderCell>
                                                    <div class="form-check form-check-inline">
                                                        <InputRadio id="@string.Concat(item.Value, "m")" class="form-check-input" Value="@item.Value" />
                                                        <label class="form-check-label" for="@item.Value.ToString()">@item.Label</label>
                                                    </div>
                                                </TableHeaderCell>
                                            }
                                        </InputRadioGroup>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    @foreach (RelatedResolutionModelItem switchItem in metricData.RelatedResolutionModels)
                                    {
                                        <TableRow>
                                            <TableHeaderCell>
                                                @{
                                                    bool disabled = !switchItem.UpscaleFactors.Contains(metricData.UpscaleFactor);
                                                    if (disabled)
                                                    {
                                                        switchItem.Checked = false;
                                                    }
                                                    <Switch TValue="bool" @bind-Checked="@switchItem.Checked" Disabled="@disabled">@switchItem.Label</Switch>
                                                }
                                            </TableHeaderCell>
                                            @foreach (UpscaleFactorItem radioItem in metricData.UpscaleFactors)
                                            {
                                                <TableHeaderCell>
                                                    @if (switchItem.UpscaleFactors.Contains(radioItem.Value))
                                                    {
                                                        <i class="fa fa-check"></i>
                                                    }
                                                </TableHeaderCell>
                                            }
                                        </TableRow>
                                    }
                                </TableBody>
                            </Table>
                            <ValidationMessage For="@(() => metricData.Images)" />
                        </div>
                        <button class="btn btn-primary btn-block" type="submit" disabled="@isMetricLoading">GENERATE</button>
                    </EditForm>
                </div>
            </div>
        </TabPanel>
    </Content>
</Tabs>

<Modal @ref="modalDataset">
    <ModalContent Size="ModalSize.ExtraLarge" Centered="true">
        <ModalHeader Style="padding: 16px 16px 0px 16px;">
            <div class="container">
                <div class="row">
                    <AuthorizeView>
                        <Authorized>
                            <div class="col-lg-2 col-sm align-self-center" style="padding:0px 16px 16px 0px;">
                                <Button Class="btn-block" Color="@(yourDatasets?Color.Secondary:Color.Dark)" Clicked="async () => { yourDatasets = false; await ChangePage(1); }">
                                    Public datasets
                                </Button>
                            </div>
                            <div class="col-lg-2 col-sm align-self-center" style="padding:0px 16px 16px 0px;">
                                <Button Class="btn-block" Color="@(yourDatasets?Color.Dark:Color.Secondary)" Clicked="async () => { yourDatasets = true; await ChangePage(1); }">
                                    Your datasets
                                </Button>
                            </div>
                        </Authorized>
                    </AuthorizeView>
                    <div class="col align-self-center" style="padding:0px;">
                        <EditForm Model="searchData" OnValidSubmit="(() => ChangePage(1))">
                            <div class="input-group mb-3">
                                <InputText class="form-control" type="search" placeholder="Search datasets" @bind-Value="searchData.Term" />
                                <div class="input-group-append">
                                    <button class="btn btn-primary" type="submit">
                                        <i class="fa fa-search"></i>
                                    </button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
            <CloseButton />
        </ModalHeader>
        <ModalBody Style="margin:0px 16px;">
            <div style="height:420px;">
                @if (pageDetails.Items.Any())
                {
                    foreach (DatasetInfo dataset in pageDetails.Items)
                    {
                        <div class="row d-block mb-3">
                            <div class="card flex-row">
                                <img class="card-img-left card-img-responsive" src=@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(dataset.Cover)) />
                                <div class="card-body">
                                    <h5 class="card-title text-truncate">
                                        <Blazorise.Link Style="cursor:pointer;" Clicked="() => LoadDataset(dataset.Id)">
                                            @dataset.Title
                                        </Blazorise.Link>
                                    </h5>
                                    <h6 class="card-subtitle text-muted">Updated @Beautify.DateToText(dataset.Date) ago</h6>
                                    <p class="card-text text-muted">@Beautify.BytesToText(dataset.Size)</p>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="row d-block mb-3">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title text-center">
                                    No datasets found
                                </h5>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <nav>
                <ul class="pagination justify-content-center" style="margin:0px;">
                    @{
                        string disabled;
                        disabled = pageDetails.HasPreviousPage ? string.Empty : "disabled";
                        <li class="page-item @disabled">
                            <Blazorise.Link Class="page-link" Clicked="(() => ChangePage(pageDetails.PageIndex - 1))">
                                &laquo;
                            </Blazorise.Link>
                        </li>
                        <li class="page-item active">
                            <Blazorise.Link Class="page-link">
                                @(pageDetails.PageIndex)
                            </Blazorise.Link>
                        </li>
                        disabled = pageDetails.HasNextPage ? string.Empty : "disabled";
                        <li class="page-item @disabled">
                            <Blazorise.Link Class="page-link" Clicked="(() => ChangePage(pageDetails.PageIndex + 1))">
                                &raquo;
                            </Blazorise.Link>
                        </li>
                    }
                </ul>
            </nav>
        </ModalBody>
    </ModalContent>
</Modal>

<Modal @ref="modalMetric" Closed="OnMetricModalClosed">
    <ModalContent Size="ModalSize.ExtraLarge" Centered="true">
        <ModalHeader>
            <ModalTitle>Metrics</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <div class="data">
                <SelectList Style="background-color: rgba(255, 255, 255, 0.8);" TItem="string" TValue="string" Data="@metricData.Metrics" TextField="@((item) => item)" ValueField="@((item) => item)" SelectedValue="@metricData.SelectedMetric" SelectedValueChanged="@OnSelectMetricChanged" />
                <BarChart TItem="double" @ref="chart" />
            </div>

            @if (modelMetrics.Count == metricData.RelatedResolutionModels.Count(x => x.Checked) + 4)
            {
                List<int> models = new() { -3, -2, -1 };
                models.AddRange(metricData.RelatedResolutionModels.Where(x => x.Checked).Select(x => x.Id));
                foreach (int model in models)
                {
                    <div class="data mt-4">
                        <Carousel @bind-SelectedSlide="@slides[model]" Autoplay="false" ShowIndicators="false" ShowControls="@(metricData.Images.Count() > 1)">
                            @for (int i = 0; i < modelMetrics[model].ImageMetrics.Count; i++)
                            {
                                <CarouselSlide Name="@i.ToString()">
                                    <div class="container">
                                        <div class="row">
                                            <div class="col">
                                                <div class="row">
                                                    <div class="col" style="padding: 0px;">
                                                        <p class="text-center font-weight-bold">
                                                            Original
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col text-center" style="padding: 0px;">
                                                        @if (metricData.Images.Count() > 0)
                                                        {
                                                            <img src=@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(metricData.Images[int.Parse(slides[model])].File)) />
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col">
                                                <div class="row">
                                                    <div class="col" style="padding: 0px;">
                                                        <p class="text-center font-weight-bold">
                                                            @modelDetails.Title
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col text-center" style="padding: 0px;">
                                                        <img src=@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(modelMetrics[modelDetails.Id].ImageMetrics[int.Parse(slides[model])].Image)) />
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col">
                                                <div class="row">
                                                    <div class="col" style="padding: 0px;">
                                                        <p class="text-center font-weight-bold">
                                                            @modelMetrics[model].Title
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col text-center" style="padding: 0px;">
                                                        <img src=@string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(modelMetrics[model].ImageMetrics[int.Parse(slides[model])].Image)) />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </CarouselSlide>
                            }
                        </Carousel>

                        <Table Class="mt-4" Borderless="true">
                            <TableHeader>
                                <TableRow>
                                    <TableHeaderCell></TableHeaderCell>
                                    <TableHeaderCell Style="color:white;">
                                        @modelDetails.Title
                                    </TableHeaderCell>
                                    <TableHeaderCell Style="color:white;">
                                        @modelMetrics[model].Title
                                    </TableHeaderCell>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                <TableRow>
                                    <TableRowHeader Style="color:white;">
                                        MSE
                                    </TableRowHeader>
                                    <TableRowCell Style="color:white;">
                                        @modelMetrics[modelDetails.Id].ImageMetrics[int.Parse(slides[model])].MSE
                                    </TableRowCell>
                                    <TableRowCell Style="color:white;">
                                        @modelMetrics[model].ImageMetrics[int.Parse(slides[model])].MSE
                                    </TableRowCell>
                                </TableRow>
                                <TableRow>
                                    <TableRowHeader Style="color:white;">
                                        PSNR
                                    </TableRowHeader>
                                    <TableRowCell Style="color:white;">
                                        @modelMetrics[modelDetails.Id].ImageMetrics[int.Parse(slides[model])].PSNR
                                    </TableRowCell>
                                    <TableRowCell Style="color:white;">
                                        @modelMetrics[model].ImageMetrics[int.Parse(slides[model])].PSNR
                                    </TableRowCell>
                                </TableRow>
                                <TableRow>
                                    <TableRowHeader Style="color:white;">
                                        SSIM
                                    </TableRowHeader>
                                    <TableRowCell Style="color:white;">
                                        @modelMetrics[modelDetails.Id].ImageMetrics[int.Parse(slides[model])].SSIM
                                    </TableRowCell>
                                    <TableRowCell Style="color:white;">
                                        @modelMetrics[model].ImageMetrics[int.Parse(slides[model])].SSIM
                                    </TableRowCell>
                                </TableRow>
                            </TableBody>
                        </Table>
                    </div>
                }
            }
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public int ModelId { get; set; }
    private string selectedTab = "model";
    private ServerSideValidator serverValidator;
    private ResolutionModelDetails modelDetails = new()
    {
        UpscaleFactors = new List<byte>(),
        RelatedResolutionModels = new List<RelatedResolutionModel>()
    };

    protected override async Task OnInitializedAsync()
    {
        await Http.Create($"/api/machine-learning-model/super-resolution/details/{ModelId}")
            .OnOk<ResolutionModelDetails>((details) =>
            {
                modelDetails = details;

                foreach (byte upscaleFactor in details.UpscaleFactors)
                {
                    UpscaleFactorItem item = new UpscaleFactorItem()
                    {
                        Label = $"{upscaleFactor}x",
                        Value = upscaleFactor
                    };
                    upscaleData.UpscaleFactors.Add(item);
                    metricData.UpscaleFactors.Add(item);
                }
                upscaleData.UpscaleFactor = upscaleData.UpscaleFactors[0].Value;
                metricData.UpscaleFactor = metricData.UpscaleFactors[0].Value;

                foreach (RelatedResolutionModel model in details.RelatedResolutionModels)
                {
                    metricData.RelatedResolutionModels.Add(new RelatedResolutionModelItem()
                    {
                        Id = model.Id,
                        Label = model.Title,
                        Checked = false,
                        UpscaleFactors = model.UpscaleFactors
                    });
                }
            })
            .OnNotFound(() =>
            {
                NavigationManager.NavigateTo("/");
            })
            .Get();
    }

    private void OnSelectedTabChanged(string name)
    {
        selectedTab = name;
    }

    private UpscaleData upscaleData = new()
    {
        UpscaleFactors = new List<UpscaleFactorItem>()
    };
    private bool isModelLoading = false;
    private byte[] outputImage = null;

    private async Task OnModelFileChanged(FileChangedEventArgs e)
    {
        foreach (IFileEntry fileEntry in e.Files)
        {
            upscaleData.Image = new FileData()
            {
                Name = fileEntry.Name,
                Size = fileEntry.Size,
                Percentage = 0
            };

            await JSRuntime.InvokeVoidAsync("UpdateInputFile", "labelu", fileEntry.Name);
            using (MemoryStream stream = new())
            {
                await fileEntry.WriteToStreamAsync(stream);
                stream.Seek(0, SeekOrigin.Begin);
                using (StreamReader reader = new(stream))
                {
                    await reader.ReadToEndAsync();
                }
            }
        }
    }

    private void OnModelFileProgressed(FileProgressedEventArgs e)
    {
        upscaleData.Image.Percentage = Convert.ToInt32(e.Percentage);
    }

    private void OnModelFileWritten(FileWrittenEventArgs e)
    {
        upscaleData.Image.File = e.Data;
    }

    private async Task OnValidModelFormSubmit()
    {
        isModelLoading = true;
        await JSRuntime.InvokeVoidAsync("ResetInputFile", "labelu", "Choose an image");

        await Http.Create($"/api/machine-learning-model/super-resolution/upscale/{modelDetails.Id}/{upscaleData.UpscaleFactor}")
            .OnCreated<byte[]>((image) =>
            {
                isModelLoading = false;
                upscaleData.Image = null;
                outputImage = image;
            })
            .OnInternalServerError(() =>
            {
                serverValidator.DisplayError(nameof(upscaleData.Image), "An error occurred on the server while processing the image.");
            })
            .Post(upscaleData.Image.File);
    }

    private Modal modalDataset;
    private SearchData searchData = new()
    {
        Term = ""
    };
    private Page<DatasetInfo> pageDetails = new()
    {
        PageSize = 3,
        PageIndex = 1,
        Items = new List<DatasetInfo>()
    };
    private bool yourDatasets = false;

    private async Task LoadDataset(long datasetId)
    {
        string uri;
        if (yourDatasets)
        {
            Session session = await ServiceProvider.Get<SessionProvider>().Session();
            uri = $"/api/datasets/images/{datasetId}/{session.Id}";
        }
        else
        {
            uri = $"/api/datasets/images/{datasetId}";
        }
        await Http.Create(uri)
            .OnOk<IList<ImageDetails>>((images) =>
            {
                metricData.Images.Clear();
                foreach (ImageDetails image in images)
                {
                    metricData.Images.Add(new FileData()
                    {
                        Name = image.Name,
                        Size = image.Size,
                        File = image.File,
                        Percentage = 100
                    });
                }
                modalDataset.Hide();
            })
            .Get();
    }

    private async Task ChangePage(int pageIndex)
    {
        if (yourDatasets)
        {
            Session session = await ServiceProvider.Get<SessionProvider>().Session();
            await Http.Create($"/api/datasets/page/{session.Id}?pageSize={pageDetails.PageSize}&pageIndex={pageIndex}&searchTerm={searchData.Term}")
                .OnOk<Page<DatasetInfo>>((page) =>
                {
                    pageDetails = page;
                })
                .Get();
        }
        else
        {
            await Http.Create($"/api/datasets/page?pageSize={pageDetails.PageSize}&pageIndex={pageIndex}&searchTerm={searchData.Term}")
                .OnOk<Page<DatasetInfo>>((page) =>
                {
                    pageDetails = page;
                })
                .Get();
        }
    }

    private MetricData metricData = new()
    {
        UpscaleFactors = new List<UpscaleFactorItem>(),
        Images = new List<FileData>(),
        RelatedResolutionModels = new List<RelatedResolutionModelItem>()
    };
    private Dictionary<string, FileData> fileNames = new();
    private IDictionary<int, string> slides = new Dictionary<int, string>();
    private IDictionary<int, DatasetMetrics> modelMetrics = new Dictionary<int, DatasetMetrics>();
    private BarChart<double> chart = new BarChart<double>();
    private List<int> models = new();
    private List<string> backgroundColors = new List<string> {
        ChartColor.FromRgba(255,  99, 132, 0.5f),
        ChartColor.FromRgba( 54, 162, 235, 0.5f),
        ChartColor.FromRgba(255, 206,  86, 0.5f),
        ChartColor.FromRgba( 75, 192, 192, 0.5f),
        ChartColor.FromRgba(153, 102, 255, 0.5f),
        ChartColor.FromRgba(255, 159,  64, 0.5f)
    };
    private List<string> borderColors = new List<string> {
        ChartColor.FromRgba(255,  99, 132, 1f),
        ChartColor.FromRgba( 54, 162, 235, 1f),
        ChartColor.FromRgba(255, 206,  86, 1f),
        ChartColor.FromRgba( 75, 192, 192, 1f),
        ChartColor.FromRgba(153, 102, 255, 1f),
        ChartColor.FromRgba(255, 159,  64, 1f)
    };
    private Modal modalMetric;
    private bool isMetricLoading = false;

    private async Task OnMetricFileChanged(FileChangedEventArgs e)
    {
        List<IFileEntry> fileEntries = new();
        foreach (IFileEntry fileEntry in e.Files)
        {
            if (fileNames.TryGetValue(fileEntry.Name, out FileData fileData))
            {
                metricData.Images.Remove(fileData);
                fileNames.Remove(fileEntry.Name);
            }

            fileData = new FileData()
            {
                Name = fileEntry.Name,
                Size = fileEntry.Size,
                Percentage = 0
            };
            metricData.Images.Add(fileData);
            fileNames.Add(fileEntry.Name, fileData);
            fileEntries.Add(fileEntry);
        }
        foreach (IFileEntry file in fileEntries)
        {
            using (MemoryStream stream = new())
            {
                await file.WriteToStreamAsync(stream);
                stream.Seek(0, SeekOrigin.Begin);
                using (StreamReader reader = new(stream))
                {
                    await reader.ReadToEndAsync();
                }
            }
        }
    }

    private void OnMetricFileProgressed(FileProgressedEventArgs e)
    {
        if (fileNames.TryGetValue(e.File.Name, out FileData fileData))
        {
            fileData.Percentage = Convert.ToInt32(e.Percentage);
        }
    }

    private void OnMetricFileWritten(FileWrittenEventArgs e)
    {
        if (fileNames.TryGetValue(e.File.Name, out FileData fileData))
        {
            fileData.File = e.Data;
        }
    }

    private async Task OnValidMetricFormSubmit()
    {
        isMetricLoading = true;
        slides.Clear();
        modelMetrics.Clear();

        models.Clear();
        models.AddRange(new int[] { modelDetails.Id, -3, -2, -1 });
        models.AddRange(metricData.RelatedResolutionModels.Where(x => x.Checked).Select(x => x.Id));
        foreach (int model in models)
        {
            slides.Add(model, "0");
            await Http.Create($"/api/machine-learning-model/super-resolution/metrics/{model}/{metricData.UpscaleFactor}")
                .OnCreated<DatasetMetrics>((datasetMetrics) =>
                {
                    modelMetrics.Add(datasetMetrics.Id, datasetMetrics);
                })
                .OnInternalServerError(() =>
                {
                    isMetricLoading = false;
                    serverValidator.DisplayError(nameof(metricData.Images), "An error occurred on the server while processing the images.");
                })
                .Post(metricData.Images.Select(x => x.File).ToList());
        }

        isMetricLoading = false;
        modalMetric.Show();
        await OnSelectMetricChanged(metricData.Metrics[0]);
    }

    private async Task OnSelectMetricChanged(string metric)
    {
        metricData.SelectedMetric = metric;

        await chart.Clear();
        List<string> labels = new();
        foreach (int model in models)
        {
            labels.Add(modelMetrics[model].Title);
        }
        await chart.AddLabelsDatasetsAndUpdate(labels, GetChartDataset(metric));
    }

    private BarChartDataset<double> GetChartDataset(string metric)
    {
        List<double> data = new();
        foreach (int model in models)
        {
            switch (metric)
            {
                case "MSE":
                    data.Add(modelMetrics[model].MSE);
                    break;
                case "PSNR":
                    data.Add(modelMetrics[model].PSNR);
                    break;
                case "SSIM":
                    data.Add(modelMetrics[model].SSIM);
                    break;
            }
        }

        return new BarChartDataset<double>
        {
            Label = metric,
            Data = data,
            BackgroundColor = backgroundColors.Take(models.Count()).ToList(),
            BorderColor = borderColors.Take(models.Count()).ToList()
        };
    }

    private void OnMetricModalClosed()
    {
        metricData.Images.Clear();
        fileNames.Clear();
    }
}