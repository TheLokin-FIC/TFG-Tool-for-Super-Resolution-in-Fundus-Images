@page "/machine-learning-model/super-resolution/{ModelId:int}"

@using DataTransfer.Output.MachineLearning.SuperResolution
@using Web.Components.Data.SuperResolution

@inject IHttpRequestBuilderFactory Http
@inject NavigationManager NavigationManager

<PageTitle Value="Super Resolution | Fundus AI" />

<Tabs SelectedTab="@SelectedTab" SelectedTabChanged="@OnSelectedTabChanged" Justified="true">
    <Items>
        <Tab Name="model">Model</Tab>
        <Tab Name="metrics">Metrics</Tab>
    </Items>
    <Content>
        <TabPanel Name="model">
            <Upscale ModelDetails="@modelDetails" UpscaleData="@upscaleData" />
        </TabPanel>
        <TabPanel Name="metrics">
            <Metrics ModelDetails="@modelDetails" MetricData="@metricData" />
        </TabPanel>
    </Content>
</Tabs>

@code {
    [Parameter]
    public int ModelId { get; set; }
    private ResolutionModelDetails modelDetails = new()
    {
        UpscaleFactors = new List<byte>(),
        RelatedResolutionModels = new List<RelatedResolutionModel>()
    };
    private UpscaleData upscaleData = new()
    {
        UpscaleFactors = new List<UpscaleFactorItem>()
    };
    private MetricData metricData = new()
    {
        UpscaleFactors = new List<UpscaleFactorItem>(),
        Images = new List<byte[]>(),
        RelatedResolutionModels = new List<RelatedResolutionModelItem>()
    };
    string SelectedTab = "model";

    protected override async Task OnInitializedAsync()
    {
        await Http.Create($"/api/machine-learning-model/super-resolution/details/{ModelId}")
            .OnOk<ResolutionModelDetails>((details) =>
            {
                modelDetails = details;

                foreach (byte upscaleFactor in details.UpscaleFactors)
                {
                    UpscaleFactorItem item = new UpscaleFactorItem()
                    {
                        Label = $"{upscaleFactor}x",
                        Value = upscaleFactor
                    };
                    upscaleData.UpscaleFactors.Add(item);
                    metricData.UpscaleFactors.Add(item);
                }
                upscaleData.UpscaleFactor = upscaleData.UpscaleFactors[0].Value;
                metricData.UpscaleFactor = metricData.UpscaleFactors[0].Value;

                foreach (RelatedResolutionModel model in details.RelatedResolutionModels)
                {
                    metricData.RelatedResolutionModels.Add(new RelatedResolutionModelItem()
                    {
                        Id = model.Id,
                        Label = model.Title,
                        Checked = false,
                        UpscaleFactors = model.UpscaleFactors
                    });
                }
            })
            .OnNotFound(() =>
            {
                NavigationManager.NavigateTo("/");
            })
            .Get();
    }

    private void OnSelectedTabChanged(string name)
    {
        SelectedTab = name;
    }
}