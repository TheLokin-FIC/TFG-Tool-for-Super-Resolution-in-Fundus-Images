// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Persistence;

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210616113201_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Repository.Persistence.Models.MachineLearningModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Architecture")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Loss")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("MachineLearningModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Architecture = "SRResNet",
                            Loss = "MSE",
                            Name = "Super Resolution"
                        },
                        new
                        {
                            Id = 2,
                            Architecture = "SRGAN",
                            Loss = "MSE",
                            Name = "Super Resolution"
                        },
                        new
                        {
                            Id = 3,
                            Architecture = "SRResNet",
                            Loss = "SSIM",
                            Name = "Super Resolution"
                        });
                });

            modelBuilder.Entity("Repository.Persistence.Models.SuperResolutionModel", b =>
                {
                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<byte>("UpscaleFactor")
                        .HasColumnType("tinyint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.HasKey("ModelId", "UpscaleFactor");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("SuperResolutionModels");

                    b.HasData(
                        new
                        {
                            ModelId = 1,
                            UpscaleFactor = (byte)2,
                            Path = "MachineLearningModels\\SuperResolution\\SRResNet\\MSE\\super_resolution_2x.onnx"
                        },
                        new
                        {
                            ModelId = 1,
                            UpscaleFactor = (byte)4,
                            Path = "MachineLearningModels\\SuperResolution\\SRResNet\\MSE\\super_resolution_4x.onnx"
                        },
                        new
                        {
                            ModelId = 1,
                            UpscaleFactor = (byte)8,
                            Path = "MachineLearningModels\\SuperResolution\\SRResNet\\MSE\\super_resolution_8x.onnx"
                        },
                        new
                        {
                            ModelId = 2,
                            UpscaleFactor = (byte)2,
                            Path = "MachineLearningModels\\SuperResolution\\SRGAN\\MSE\\super_resolution_2x.onnx"
                        },
                        new
                        {
                            ModelId = 2,
                            UpscaleFactor = (byte)4,
                            Path = "MachineLearningModels\\SuperResolution\\SRGAN\\MSE\\super_resolution_4x.onnx"
                        },
                        new
                        {
                            ModelId = 2,
                            UpscaleFactor = (byte)8,
                            Path = "MachineLearningModels\\SuperResolution\\SRGAN\\MSE\\super_resolution_8x.onnx"
                        },
                        new
                        {
                            ModelId = 3,
                            UpscaleFactor = (byte)2,
                            Path = "MachineLearningModels\\SuperResolution\\SRResNet\\SSIM\\super_resolution_2x.onnx"
                        },
                        new
                        {
                            ModelId = 3,
                            UpscaleFactor = (byte)4,
                            Path = "MachineLearningModels\\SuperResolution\\SRResNet\\SSIM\\super_resolution_4x.onnx"
                        });
                });

            modelBuilder.Entity("Repository.Persistence.Models.SuperResolutionModel", b =>
                {
                    b.HasOne("Repository.Persistence.Models.MachineLearningModel", "MachineLearningModel")
                        .WithMany("SuperResolutionModels")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MachineLearningModel");
                });

            modelBuilder.Entity("Repository.Persistence.Models.MachineLearningModel", b =>
                {
                    b.Navigation("SuperResolutionModels");
                });
#pragma warning restore 612, 618
        }
    }
}
